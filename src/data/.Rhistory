circles_json <- fromJSON(file = './circles_CLEAN_TEMPLATE_DO_NOT_ERASE.json')
df <- circles_json[[1]] %>% as_tibble()
map(circles_json[2:3], function(x){
row_tib <- x %>% as_tibble()
print(row_tib)
df <- df %>% add_row(row_tib)
print(df)
})
library(rjson)
library(tidyverse)
library(purrr)
circles_json <- fromJSON(file = './circles_CLEAN_TEMPLATE_DO_NOT_ERASE.json')
df <- circles_json[[1]] %>% as_tibble()
map(circles_json[2:3], function(x){
row_tib <- x %>% as_tibble()
print(row_tib)
df <- df %>% add_row(row_tib)
print(df)
})
library(rjson)
library(tidyverse)
library(purrr)
circles_json <- fromJSON(file = './circles_CLEAN_TEMPLATE_DO_NOT_ERASE.json')
df <- circles_json[[1]] %>% as_tibble()
map(circles_json[2:3], function(x){
row_tib <- x %>% as_tibble()
print(row_tib)
df <<- df %>% add_row(row_tib)
print(df)
})
library(rjson)
library(tidyverse)
library(purrr)
circles_json <- fromJSON(file = './circles_CLEAN_TEMPLATE_DO_NOT_ERASE.json')
df <- circles_json[[1]] %>% as_tibble()
map(circles_json[2:length(circles_json)], function(x){
row_tib <- x %>% as_tibble()
print(row_tib)
df <<- df %>% add_row(row_tib)
print(df)
})
library(rjson)
library(tidyverse)
library(purrr)
circles_json <- fromJSON(file = './circles_CLEAN_TEMPLATE_DO_NOT_ERASE.json')
df <- circles_json[[1]] %>% as_tibble()
map(circles_json[2:length(circles_json)], function(x){
row_tib <- x %>% as_tibble()
df <<- df %>% add_row(row_tib)
})
df
df_list <- lapply(circles_json, function(x){ x %>% as_tibble()})
df_list
df_list <- lapply(circles_json, function(x){ x %>% as_tibble()})
df_list
x1 <- lapply(circles_json, function(x){ x$name})
x1
attributes(circles_json)
circles_json
circles_json[[1]]$attributes
attributes(circles_json[[1]])
attributes(circles_json[[1]])
attributes(circles_json[[1]])$names
columns <- list()
for(name in attributes(circles_json[[1]])$names){
columns[name] <- lapply(circles_json, function(x){ x[name]})
}
columns <- list()
for(name in attributes(circles_json[[1]])$names){
print(name)
columns[name] <- lapply(circles_json, function(x){ x[name]})
}
columns
help(lapply)
columns <- list()
for(name in attributes(circles_json[[1]])$names){
print(name)
columns[name] <- sapply(circles_json, function(x){ x[name]})
}
columns
name <- 'time'
sapply(circles_json, function(x){ x[name]})
lapply(circles_json, function(x){ x[name]})
unlis(lapply(circles_json, function(x){ x[name]}))
unlist(lapply(circles_json, function(x){ x[name]}))
columns <- list()
for(name in attributes(circles_json[[1]])$names){
print(name)
columns[name] <- lapply(circles_json, function(x){ x[name]}) %>% unlist()
}
columns
lapply(circles_json, function(x){ x[name]}) %>% unlist()
test <- lapply(circles_json, function(x){ x[name]}) %>% unlist()
test
test[1:10]
attributes(circles_json[[1]])$names
columns[name] <- test
columns <- list()
columns[name] <- test
columns <- list()
columns[name]
columns
columns[name] <- c(1,2,3)
column_names <- attributes(circles_json[[1]])$names
for(i in (1:length(column_names))){
print(name)
columns[[i]] <- lapply(circles_json, function(x){ x[column_names[i]]}) %>% unlist()
}
columns
columns <- list()
column_names <- attributes(circles_json[[1]])$names
for(i in (1:length(column_names))){
print(column_names[i])
columns[[i]] <- lapply(circles_json, function(x){ x[column_names[i]]}) %>% unlist()
}
attributes(columns)$names
attributes(columns)$names <- column_names
columns %>% as_tibble()
columns
library(rjson)
library(tidyverse)
library(purrr)
circles_json <- fromJSON(file = './circles_CLEAN_TEMPLATE_DO_NOT_ERASE.json')
df <- circles_json[[1]] %>% as_tibble()
map(circles_json[2:length(circles_json)], function(x){
row_tib <- x %>% as_tibble()
df <<- df %>% add_row(row_tib)
})
df
df %>% filter(name == 'WALMART INC')
df %>% filter(name == 'WALMART INC.')
df
circles_json %>% length()
circles_json <- read_json('./circles_CLEAN_TEMPLATE_DO_NOT_ERASE.json')
library(jsonlite)
circles_json <- read_json('./circles_CLEAN_TEMPLATE_DO_NOT_ERASE.json')
circles_json
circles_json %>% as_tibble()
circles_json %>% as.data.frame()
circles_json
circles_json$name
circles_json <- read_json('./circles_CLEAN_TEMPLATE_DO_NOT_ERASE.json')
map(circle_json, function(x){
x$rank <<- NULL
})
circles_json <- read_json('./circles_CLEAN_TEMPLATE_DO_NOT_ERASE.json')
map(circles_json, function(x){
x$rank <<- NULL
})
updated_json <- map(circles_json, remove_rank)
%>% as.data.frame()
remove_rank <- function(x){
x$rank <<- NULL
}
updated_json <- map(circles_json, remove_rank)
updated_json <- lmap(circles_json, remove_rank)
updated_json <- lmap(circles_json, remove_rank())
circles_json
circles_json[[1]]
circles_json[[1]][-2]
circles_json[[1]]['rank']
circles_json[[1]][-'rank']
circles_json[[1]][attributes(circles_json[[1]])$names != 'rank']
rapply(circles_json, function(x){x[attributes(x)$names != 'rank']}, how = "replace")
lapply(circles_json, function(x){x[attributes(x)$names != 'rank']})
json_wo_rank <- lapply(circles_json, function(x){x[attributes(x)$names != 'rank']})
library(rjson)
circles_json <- read_json('./circles_CLEAN_TEMPLATE_DO_NOT_ERASE.json')
json_wo_rank <- lapply(circles_json, function(x){x[attributes(x)$names != 'rank']})
write(jsonData, "cicles_no_rank.json")
write(json_wo_rank, "cicles_no_rank.json")
json_wo_rank
jsonData < toJSON(json_wo_rank)
jsonData < toJSON(json_wo_rank)
circles_json <- read_json('./circles_CLEAN_TEMPLATE_DO_NOT_ERASE.json')
json_wo_rank <- lapply(circles_json, function(x){x[attributes(x)$names != 'rank']})
jsonData < toJSON(json_wo_rank)
jsonData <- toJSON(json_wo_rank)
write(json_wo_rank, "cicles_no_rank.json")
json_wo_rank
jsonData <- toJSON(json_wo_rank)
write(jsonData, "cicles_no_rank.json")
library(rjson)
circles_json <- read_json('./circles_CLEAN_TEMPLATE_DO_NOT_ERASE.json')
json_wo_rank <- lapply(circles_json, function(x){x[attributes(x)$names != 'rank']})
jsonData <- toJSON(json_wo_rank)
write(jsonData, "cicles_no_rank.json")
json_wo_rank
circles_json
json_wo_rank
jsonData
jsonData <- toJSON(json_wo_rank, pretty = TRUE)
jsonData
jsonData <- toJSON(json_wo_rank, auto_unbox = TRUE)
jsonData
write(jsonData, "cicles_no_rank.json")
setwd("~/Documents/Github_repos/firms_gapminder_v2/src/data")
source("~/Documents/Github_repos/NACM_auto_report/auto_report/master.R", echo=TRUE)
setwd("~/Documents/Github_repos/firms_gapminder_v2/src/data")
setwd("~/Documents/Github_repos/NACM_auto_report/auto_report")
source("~/Documents/Github_repos/NACM_auto_report/auto_report/master.R", echo=TRUE)
source("~/Documents/Github_repos/NACM_auto_report/auto_report/master.R", echo=TRUE)
